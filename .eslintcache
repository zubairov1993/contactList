[{"C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\components\\Search\\Search.js":"3","C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\components\\List\\List.js":"4","C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\components\\AddContact\\AddContact.js":"5","C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\components\\Search\\Contact.js":"6"},{"size":219,"mtime":1607089099398,"results":"7","hashOfConfig":"8"},{"size":2276,"mtime":1607437840624,"results":"9","hashOfConfig":"8"},{"size":1332,"mtime":1607497419275,"results":"10","hashOfConfig":"8"},{"size":5800,"mtime":1607497637432,"results":"11","hashOfConfig":"8"},{"size":7554,"mtime":1607432645015,"results":"12","hashOfConfig":"8"},{"size":1679,"mtime":1607498216958,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ngorvh",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\index.js",[],["29","30"],"C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\App.js",["31","32"],"import React from \"react\";\nimport List from \"./components/List/List\";\nimport AddContact from \"./components/AddContact/AddContact\";\n\nfunction App() {\n  let lists = [\n    {\n      name: \"Иван\",\n      surname: \"Иванов\",\n      patronymic: \"Иванович\",\n      email: \"ivan@mal.com\",\n      password: \"ivan\",\n      phone: \"88000000000\",\n      status: \"admin\",\n    },\n    {\n      name: \"Петр\",\n      surname: \"Петров\",\n      patronymic: \"Петрович\",\n      email: \"petr@mal.com\",\n      password: \"petr\",\n      phone: \"88000000000\",\n      status: \"client\",\n    },\n    {\n      name: \"Александр\",\n      surname: \"Александров\",\n      patronymic: \"Александрич\",\n      email: \"alex@mal.com\",\n      password: \"alex\",\n      phone: \"88000000000\",\n      status: \"partner\",\n    },\n    {\n      name: \"Алексей\",\n      surname: \"Алексеев\",\n      patronymic: \"Алексеевич\",\n      email: \"petr@mal.com\",\n      password: \"alex\",\n      phone: \"88000000000\",\n      status: \"client\",\n    },\n    {\n      name: \"Сергей\",\n      surname: \"Сергеев\",\n      patronymic: \"Сергеевич\",\n      email: \"petr@mal.com\",\n      password: \"\",\n      phone: \"88000000000\",\n      status: \"partner\",\n    },\n    {\n      name: \"Мария\",\n      surname: \"Иванова\",\n      patronymic: \"Ивановна\",\n      email: \"petr@mal.com\",\n      password: \"\",\n      phone: \"88000000000\",\n      status: \"client\",\n    },\n  ];\n\n  const [persons, setPersons] = React.useState([]);\n  const [contacts, setContacts] = React.useState(\"\");\n\n  localStorage.setItem(\"lists\", JSON.stringify(persons));\n\n  React.useEffect(() => {\n    setPersons(lists);\n  }, []);\n\n  React.useEffect(() => {\n    let recivContacts = localStorage.getItem(\"lists\");\n    let list = JSON.parse(recivContacts);\n    setContacts(list);\n  }, [persons]);\n\n  const overLoad = () => {\n    let list = JSON.parse(localStorage.getItem(\"persons\"));\n    setContacts(list);\n  };\n\n  return (\n    <div className=\"App\">\n      {contacts ? (\n        <AddContact overLoad={overLoad} contacts={contacts} />\n      ) : (\n        \"...Loading\"\n      )}\n      {/* {contacts ? <List overLoad={overLoad} list={contacts} /> : \"...Loading\"} */}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\components\\Search\\Search.js",[],"C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\components\\List\\List.js",["33","34","35","36","37","38","39"],"C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\components\\AddContact\\AddContact.js",["40"],"import React from \"react\";\r\nimport {\r\n  Button,\r\n  InputLabel,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  TextField,\r\n  IconButton,\r\n  OutlinedInput,\r\n  InputAdornment,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\n\r\nimport ClearOutlinedIcon from \"@material-ui/icons/ClearOutlined\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport Search from \"../Search/Search\";\r\n\r\nfunction AddContact({ contacts, overLoad }) {\r\n  const [list, setList] = React.useState(\"\");\r\n  const [visiblePopup, setVisiblePopup] = React.useState(false);\r\n  const [valueSurName, setValueSurName] = React.useState(\"\");\r\n  const [valueName, setValueName] = React.useState(\"\");\r\n  const [valuePatronymic, setValuePatronymic] = React.useState(\"\");\r\n  const [valueEmail, setValueEmail] = React.useState(\"\");\r\n  const [valuePhone, setValuePhone] = React.useState(\"\");\r\n  const [valueStatus, setValueStatus] = React.useState(\"\");\r\n  const [values, setValues] = React.useState({\r\n    amount: \"\",\r\n    password: \"\",\r\n    weight: \"\",\r\n    weightRange: \"\",\r\n    showPassword: false,\r\n  });\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n      margin: theme.spacing(0.5),\r\n      backgroundColor: \"#ffffff\",\r\n      borderRadius: 4,\r\n    },\r\n    contact: {\r\n      position: \"relative\",\r\n      paddingTop: 50,\r\n      borderTop: \"1px solid #cccccc\",\r\n    },\r\n    btn__add: {\r\n      position: \"absolute\",\r\n      right: 20,\r\n      bottom: 7,\r\n    },\r\n    btn__close: {\r\n      width: 15,\r\n      height: 15,\r\n      background: \"#3f51b5\",\r\n      position: \"absolute\",\r\n      right: -10,\r\n      top: -10,\r\n\r\n      \"& svg\": {\r\n        fontSize: 15,\r\n        color: \"#ffffff\",\r\n      },\r\n    },\r\n    popup: {\r\n      display: \"inline-flex\",\r\n      flexDirection: \"column\",\r\n      position: \"absolute\",\r\n      backgroundColor: \"#fff\",\r\n      zIndex: 99,\r\n      borderRadius: 5,\r\n      right: 180,\r\n      top: 7,\r\n      border: \"1px solid #ccc\",\r\n    },\r\n    select: {\r\n      zIndex: 100,\r\n    },\r\n  }));\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setList(contacts);\r\n  });\r\n  const addList = () => {\r\n    const contacts = {\r\n      name: valueName,\r\n      surname: valueSurName,\r\n      patronymic: valuePatronymic,\r\n      email: valueEmail,\r\n      password: values.password,\r\n      phone: valuePhone,\r\n      status: valueStatus,\r\n    };\r\n\r\n    const newList = [...list, contacts];\r\n    localStorage.setItem(\"persons\", JSON.stringify(newList));\r\n\r\n    setVisiblePopup(false);\r\n    overLoad();\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisiblePopup(false);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.contact}>\r\n      <Search />\r\n\r\n      <Button\r\n        onClick={() => setVisiblePopup(!visiblePopup)}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.btn__add}\r\n        endIcon={<PersonAddIcon />}\r\n      >\r\n        Добавить\r\n      </Button>\r\n      {visiblePopup && (\r\n        <div className={classes.popup}>\r\n          <FormControl className={classes.margin}>\r\n            <TextField\r\n              label=\"Введите Фамилию\"\r\n              id=\"outlined-size-small\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              onChange={(e) => setValueSurName(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl className={classes.margin}>\r\n            <TextField\r\n              label=\"Введите Имя\"\r\n              id=\"outlined-size-small\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              onChange={(e) => setValueName(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl className={classes.margin}>\r\n            <TextField\r\n              label=\"Введите отчество\"\r\n              id=\"outlined-size-small\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              onChange={(e) => setValuePatronymic(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl className={classes.margin}>\r\n            <TextField\r\n              label=\"Введите Email\"\r\n              id=\"outlined-size-small\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              onChange={(e) => setValueEmail(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl\r\n            size=\"small\"\r\n            className={classes.margin}\r\n            variant=\"outlined\"\r\n          >\r\n            <InputLabel htmlFor=\"outlined-adornment-password\">\r\n              Password\r\n            </InputLabel>\r\n            <OutlinedInput\r\n              id=\"outlined-adornment-password\"\r\n              type={values.showPassword ? \"text\" : \"password\"}\r\n              value={values.password}\r\n              onChange={handleChange(\"password\")}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={handleClickShowPassword}\r\n                    onMouseDown={handleMouseDownPassword}\r\n                    edge=\"end\"\r\n                  >\r\n                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n              labelWidth={70}\r\n            />\r\n          </FormControl>\r\n          <FormControl className={classes.margin}>\r\n            <TextField\r\n              label=\"Введите номер телефона\"\r\n              id=\"outlined-size-small\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              onChange={(e) => setValuePhone(e.target.value)}\r\n            />\r\n          </FormControl>\r\n          <FormControl\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            className={classes.margin}\r\n          >\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">\r\n              Выберите статус\r\n            </InputLabel>\r\n            <Select\r\n              className={classes.select}\r\n              labelId=\"demo-simple-select-outlined-label\"\r\n              id=\"demo-simple-select-outlined\"\r\n              onChange={(e) => setValueStatus(e.target.value)}\r\n              label=\"Выберите статус\"\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value={\"admin\"}>Admin</MenuItem>\r\n              <MenuItem value={\"client\"}>Client</MenuItem>\r\n              <MenuItem value={\"partner\"}>Partner</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <IconButton\r\n            onClick={onClose}\r\n            className={classes.btn__close}\r\n            aria-label=\"delete\"\r\n          >\r\n            <ClearOutlinedIcon />\r\n          </IconButton>\r\n          <Button\r\n            onClick={addList}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            // className={classes.btn__add_contact}\r\n          >\r\n            Добавить контакт\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddContact;\r\n","C:\\Users\\Lenovo\\Desktop\\test\\test\\src\\components\\Search\\Contact.js",["41","42","43","44","45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":12},{"ruleId":"54","severity":1,"message":"55","line":70,"column":6,"nodeType":"56","endLine":70,"endColumn":8,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":45,"column":26,"nodeType":"60","messageId":"61","endLine":45,"endColumn":42},{"ruleId":"58","severity":1,"message":"62","line":51,"column":29,"nodeType":"60","messageId":"61","endLine":51,"endColumn":48},{"ruleId":"58","severity":1,"message":"63","line":57,"column":32,"nodeType":"60","messageId":"61","endLine":57,"endColumn":54},{"ruleId":"58","severity":1,"message":"64","line":63,"column":27,"nodeType":"60","messageId":"61","endLine":63,"endColumn":44},{"ruleId":"58","severity":1,"message":"65","line":69,"column":27,"nodeType":"60","messageId":"61","endLine":69,"endColumn":44},{"ruleId":"58","severity":1,"message":"66","line":75,"column":28,"nodeType":"60","messageId":"61","endLine":75,"endColumn":46},{"ruleId":"67","severity":1,"message":"68","line":91,"column":22,"nodeType":"69","messageId":"70","endLine":91,"endColumn":24},{"ruleId":"54","severity":1,"message":"71","line":95,"column":3,"nodeType":"60","endLine":95,"endColumn":18,"suggestions":"72"},{"ruleId":"50","severity":1,"message":"73","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":13},{"ruleId":"50","severity":1,"message":"74","line":3,"column":8,"nodeType":"52","messageId":"53","endLine":3,"endColumn":17},{"ruleId":"50","severity":1,"message":"75","line":5,"column":8,"nodeType":"52","messageId":"53","endLine":5,"endColumn":22},{"ruleId":"50","severity":1,"message":"76","line":6,"column":8,"nodeType":"52","messageId":"53","endLine":6,"endColumn":17},{"ruleId":"50","severity":1,"message":"77","line":8,"column":8,"nodeType":"52","messageId":"53","endLine":8,"endColumn":13},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'lists'. Either include it or remove the dependency array.","ArrayExpression",["80"],"no-self-assign","'list[index].name' is assigned to itself.","MemberExpression","selfAssignment","'list[index].surname' is assigned to itself.","'list[index].patronymic' is assigned to itself.","'list[index].email' is assigned to itself.","'list[index].phone' is assigned to itself.","'list[index].status' is assigned to itself.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect contains a call to 'setList'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [contacts] as a second argument to the useEffect Hook.",["81"],"'Table' is defined but never used.","'TableBody' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'Paper' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [lists]",{"range":"86","text":"87"},"Add dependencies array: [contacts]",{"range":"88","text":"89"},[1568,1570],"[lists]",[2477,2477],", [contacts]"]